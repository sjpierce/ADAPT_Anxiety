---
title: "ADAPT Treatment Effect on Anxiety Diagnosis"
subtitle: "Client: Lucy Nguyen. CSTAT Case: C1593"
author: 
  - name: Steven J. Pierce
    orcid: 0000-0002-0679-3019
    email: pierces1@msu.edu
    affiliations: 
      - name: Michigan State University, Center for Statistical Training and Consulting
params:
  SourceDir: "scripts/"
  SourceFile: "Import_SPSS_Data.qmd"
  LogFile: "Import_SPSS_Data.html"
bibliography: references.bib
csl: apa.csl
date: now
date-modified: last-modified
date-format: YYYY-MM-DD HH:mm:ss z
format: 
  html:
    output-file: "Import_SPSS_Data_Draft.html"
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: true
    code-tools: true
    code-line-numbers: false
    embed-resources: true 
    anchor-sections: true
    theme: default
execute: 
  eval: true 
  echo: fenced 
  output: true 
  message: true 
  warning: true 
  error: true 
  include: true 
---

# Overview
This file imports data required for Lucy Nguyen's study called 
*Effects of How Mental Health Diagnosis in Pediatric Patients with Functional Abdominal Pain Disorders Respond to Cognitive Behavioral Therapy Specifically for Anxiety Symptoms*, 
which was tracked by CSTAT as Case C1593. The original data come from one of 
Dr. Natoshia Cunningham's grants. Lucy is one of Dr. Cunningham's students. The
study was a randomized controlled trial of a tailored cognitive behavioral
therapy (CBT) treatment for functional abdominal pain in pediatric patients that
was called ADAPT. The control group received treatment as usual (TAU).

# Setup
Most readers will want to just skip to @sec-Import. This section is mostly
useful to the statistician who ran the analyses as methods and reproducibility 
documentation.

## Declare Path
This next chunk declares the path to this script relative to the project-level 
root directory. If the file is not in the right location under the project root
you'll get a warning message. This helps ensure relative paths are all working 
as expected. 

``` {r}
#| label: declare-path

# Declare path to this script relative to the project root directory.
here::i_am(path = paste0(params$SourceDir, params$SourceFile))
```

Note that `here()` creates a path relative to the location of the 
`ADAPT_Anxiety.Rproj` file that will be portable across different computers.
That's why we use that function when specifying file paths throughout the
script.

## Load Packages
Below we load some R packages that we'll need  to use. 

```{r}
#| label: load-packages
#| include: true

library(devtools)     # for session_info()
library(here)         # for here() and i_am(), handling relative file paths. 
library(rmarkdown)    # for pandoc_version()
library(knitr)        # for kable()
options(kableExtra.latex.load_packages = FALSE)
library(kableExtra)   # for kable_styling() and formatting tables. 
library(tidyverse)    # Loads the dplyr, forcats, ggplot2, lubridate, purrr, 
                      # readr, stringr, tibble, and tidyr packages, for access 
                      # to %>%, select(), mutate(), etc. 
library(haven)        # for read_spss().
library(labelled)     # for set_variable_labels()
library(assertr)      # for verify() and assert()
library(piercer)      # for all_classes()
library(quarto)       # for quarto_version()
```

# Import Data {#sec-Import}
According to @Cunningham-RN8194, a total of 89 patients were randomized. Email 
with team members shows that 2 TAU patients were later excluded "because 
exclusion criteria was met at the post assessment, following the consort diagram 
in the attached paper." The PI (Dr. Cunningham) wants those 2 patients excluded 
from these analyses too, so we should end up with 87 eligible, randomized 
patients. 

## Eligible Patients
This section imports an SPSS file that contains the ID for each of the 87 
eligible, randomized patients. It does not contain the outcome data we need, so 
this will be used to help find the right set of cases in the outcomes data file. 
While reading this file in, we use functions from the `assertr` package ensure 
that all IDs are unique, non-missing values, and Randomization values are all
non-missing and valid. 

```{r}
#| label: read-spss-data-eligible

ADAPT_Eligible <- read_spss(file = here("scripts/extdata/JAMES ADAPT_UPDATE.sav"),
                            user_na = TRUE) %>% 
  # Give error if number of records is not 87. 
  verify(nrow(.) == 87) %>% 
  # Give error if any IDs or Randomization values are missing.
  assert(function(x){not_na(x)}, ID, Randomization) %>% 
  # Give error if any IDs are not unique.
  assert(function(x){is_uniq(x, allow.na=FALSE)}, ID) %>% 
  # Give error if any Randomization values are not either 1 or 2.
  assert(in_set(1:2), Randomization) 
```

The imported `ADAPT_Eligible` data frame has `r nrow(ADAPT_Eligible)` rows and 
`r ncol(ADAPT_Eligible)` variables. @tbl-ADAPT-Eligible-variables shows a list 
of the variable positions, names, and classes.

``` {r}
#| label: tbl-ADAPT-Eligible-variables
#| tbl-cap: "ADAPT Eligible Patients Data: Raw Imported Variable Names and Classes."

ADAPT_EligibleVars <- list(ADAPT_Eligible) %>% 
  map_dfr(~ tibble(Name = names(.x), Class = map_chr(.x, all_classes), 
                   Label = var_label(.x))) %>% 
  rowid_to_column(., "Position")

kable(ADAPT_EligibleVars, format = "html", booktabs = TRUE, longtable = TRUE) %>%
  kable_styling(bootstrap_options = "striped", 
                latex_options = c("repeat_header")) 
```

@tbl-Eligible-arm-freq shows the frequency distribution of the randomized arm 
allocations so we can confirm that this matches expected results based on 
CONSORT chart in @Cunningham-RN8194. 

```{r}
#| label: tbl-Eligible-arm-freq
#| tbl-cap: Number of Patients by Randomized Arm Allocation in ADAPT_Eligible Data

ADAPT_Eligible %>% 
  mutate(Arm = as_factor(Randomization)) %>% 
  xtabs(~Arm, addNA = TRUE, data = .) %>% 
  addmargins() %>% 
  as.data.frame() %>% 
  mutate(Type = case_when(Arm == "ADAPT" ~ "Intervention", 
                          Arm == "TAU" ~ "Control",
                          Arm == "Sum" ~ "Intervention + Control")) %>% 
  select(Arm, Type, Freq) %>% 
  kable(format = "html", booktabs = TRUE, 
        col.names = c("Randomized Arm", "Type", "Frequency")) %>% 
  kable_styling(bootstrap_options = "striped") 
```

## Outcomes Data
This section imports an SPSS file that contains the outcome variables we need to 
analyze. It contains both eligible and ineligible individuals. While reading 
this file in, we use functions from the `assertr` package ensure that all IDs are 
unique, non-missing values, and Allocation values are all non-missing and valid. 

```{r}
#| label: read-spss-data-outcomes

ADAPT_Outcomes <- read_spss(file = here("scripts/extdata/Cleaned_ADAPT_Data_Allocation_Included_07.08.24sav.sav"),
                        user_na = TRUE) %>% 
  # Give error if any IDs or Allocation values are missing.
  assert(function(x){not_na(x)}, ID, Allocation) %>% 
  # Give error if any IDs are not unique.
  assert(function(x){is_uniq(x, allow.na=FALSE)}, ID) %>% 
  # Give error if any Randomization values are not either 1 or 2.
  assert(in_set(1:2), Allocation)
```

The imported `ADAPT_Outcomes` data frame has `r nrow(ADAPT_Outcomes)` rows and 
`r ncol(ADAPT_Outcomes)` variables. @tbl-ADAPT-Outcomes-variables shows a list 
of the variable positions, names, and classes.

``` {r}
#| label: tbl-ADAPT-Outcomes-variables
#| tbl-cap: "ADAPT Outcomes Data: Raw Imported Variable Names and Classes."

ADAPT_OutcomesVars <- list(ADAPT_Outcomes) %>% 
  map_dfr(~ tibble(Name = names(.x), Class = map_chr(.x, all_classes), 
                   Label = var_label(.x))) %>% 
  rowid_to_column(., "Position")

kable(ADAPT_OutcomesVars, format = "html", booktabs = TRUE, longtable = TRUE) %>%
  kable_styling(bootstrap_options = "striped", 
                latex_options = c("repeat_header")) 
```

@tbl-Outcomes-arm-freq shows the frequency distribution of the randomized arm 
allocations, illustrating that this file has an extra TAU patient who will 
need to be excluded before analyses can proceed. 

```{r}
#| label: tbl-Outcomes-arm-freq
#| tbl-cap: Number of Patients by Randomized Arm Allocation in ADAPT_Outcomes Data

ADAPT_Outcomes %>% 
  mutate(Arm = as_factor(Allocation)) %>% 
  xtabs(~Arm, addNA = TRUE, data = .) %>% 
  addmargins() %>% 
  as.data.frame() %>% 
  mutate(Type = case_when(Arm == "ADAPT" ~ "Intervention", 
                          Arm == "TAU" ~ "Control",
                          Arm == "Sum" ~ "Intervention + Control")) %>% 
  select(Arm, Type, Freq) %>% 
  kable(format = "html", booktabs = TRUE, 
        col.names = c("Randomized Arm", "Type", "Frequency")) %>% 
  kable_styling(bootstrap_options = "striped") 
```

# Data Management
Per the ADAPT_Eligible dataset, there are `r nrow(ADAPT_Eligible)` eligible, 
randomized participants. However, the `ADAPT_Outcomes` data file has 
`r nrow(ADAPT_Outcomes)`, so we have to do some data management to prepare it 
for use. 

```{r}
#| label: tbl-Eligible-Dropout
#| tbl-cap: Number of Eligible Patients by Dropout Status and Randomized Arm 
#|          Allocation in ADAPT_Eligible Data

ADAPT_Eligible %>% 
  mutate(Arm = as_factor(Randomization), 
         Dropout = factor(attrition, levels = c(0,1), 
                          labels = c("Retained through post-test", 
                                     "Dropped out after baseline"))) %>% 
  xtabs(~Dropout + Arm, addNA = TRUE, data = .) %>% 
  addmargins() %>% 
  as.data.frame() %>% 
  pivot_wider(names_from = Arm, values_from = Freq) %>% 
  kable(format = "html", booktabs = TRUE) %>% 
  kable_styling(bootstrap_options = "striped") 
```

Because we know some eligible patients dropped out after baseline, we create 
`ADAPT_Eligible_Dropout` to store the IDs for those patients. 

```{r}
#| label: create-ADAPT-Eligible-Dropout

ADAPT_Eligible_Dropout <- ADAPT_Eligible %>% 
  filter(attrition == 1) 
```

The `ADAPT_Eligible_Dropout` data has N = `r nrow(ADAPT_Eligible_Dropout)` rows. 
We will use this dataset while creating a dropout status variable in the 
outcomes data. 

The `ADAPT_Outcomes` data file has N = `r nrow(ADAPT_Outcomes)` rows, so we have 
to do some data management to prepare it for use. Key steps include adding in 
a dropout indicator variable, removing rows for patients who were ineligible, 
dropping variables we won't need, and computing some new variables. 


demog_vars   <- c("Caregender", "Caretype", "Age", "Gender", "Race", "race_cat",
                  "Mother.edu", "m_edu_group", "Father.edu", "f_edu_group",
                  "Mother.employ", "M_employ_group", "M.code", "M.SEItot", 
                  "M.SEIm", "Father.employ", "F_employ_group", "F.code", 
                  "F.SEItot", "F.SEIm", "mother.pain", "mother.paintype", 
                  "siblings.pain", "sib.paintype", "father.pain", "f.paintype", 
                  "other.pain", "other", "school.type", "Grade", "School.name", 
                  "school.session", "home.schoolpref", "pain.absence.past.month", 
                  "other.abse.ce.past.month", "pain.absence.past.week", 
                  "other.absence.past.week", "pain.late.past.month", 
                  "other.late.past.month", "late.pain.past.week", 
                  "late.other.past.week", "home.absense", "abdpaininfo", 
                  "precip.factor", "precip.group", "duration", "freq.criteria", 
                  "freq", "frequency", "location1", "location2", "location3", 
                  "diagnosis", "other.dx", "primary.pain", "other.primary", 
                  "pain.oth.cat", "pain.other", 
                  "Pain_High_Screen", "Pain_Low_Screen", "Pain_Avg_Screen")
outcome_vars <- c("GAD_Pre", "GAD_Post", "Social_Pre", "Social_Post", "SAD_Pre", 
                  "SAD_Post", "Panic_Pre", "Panic_Post", "OCD_Pre", "OCD_Post", 
                  "MDD_Pre", "MDD_Post", "Dysthymia_Pre", "Dysthymia_Post")
scores_vars  <- c("DASS_Tot_Pre", "DASS_Tot_Post", "SCARED_Tot_Pre", 
                  "SCARED_Tot_Post", "CDI_Tot_Pre", "CDI_Tot_Post", 
                  "PCS_Tot_Pre", "PCS_Tot_Post", "FDI_Tot_Pre", "FDI_Tot_Post")

ADAPT_Clean_Data <- ADAPT_Outcomes %>% 
  mutate(Arm = as_factor(Allocation),
         Eligible = ID %in% ADAPT_Eligible$ID) %>% 
  # Retain only eligible, randomized participants. 
  filter(Eligible == TRUE) %>% 
  # Give error if number of records does not match expected value. 
  verify(nrow(.) == nrow(ADAPT_Eligible)) %>% 
  # Retain only variables I'll need for analyses. Mostly this drops item-level 
  # variables from instruments
  select(ID, Arm, all_of(c(demog_vars, outcome_vars, scores_vars))) %>% 
  # Compute some new variables.
  mutate(GAD_Change = case_when(
            GAD_Pre > GAD_Post ~ "Improved",
            GAD_Pre == GAD_Post ~ "No Change",
            GAD_Pre < GAD_Post ~ "Worsened",
            .default = NA),
         Social_Change = case_when(
            Social_Pre > Social_Post ~ "Improved",
            Social_Pre == Social_Post ~ "No Change",
            Social_Pre < Social_Post ~ "Worsened",
            .default = NA),
         SAD_Change = case_when(
            SAD_Pre > SAD_Post ~ "Improved",
            SAD_Pre == SAD_Post ~ "No Change",
            SAD_Pre < SAD_Post ~ "Worsened",
            .default = NA),
         Panic_Change = case_when(
            Panic_Pre > Panic_Post ~ "Improved",
            Panic_Pre == Panic_Post ~ "No Change",
            Panic_Pre < Panic_Post ~ "Worsened",
            .default = NA),
         OCD_Change = case_when(
            OCD_Pre > OCD_Post ~ "Improved",
            OCD_Pre == OCD_Post ~ "No Change",
            OCD_Pre < OCD_Post ~ "Worsened",
            .default = NA),
         MDD_Change = case_when(
            MDD_Pre > MDD_Post ~ "Improved",
            MDD_Pre == MDD_Post ~ "No Change",
            MDD_Pre < MDD_Post ~ "Worsened",
            .default = NA),
         Dysthymia_Change = case_when(
            Dysthymia_Pre > Dysthymia_Post ~ "Improved",
            Dysthymia_Pre == Dysthymia_Post ~ "No Change",
            Dysthymia_Pre < Dysthymia_Post ~ "Worsened",
            .default = NA))
```

The imported `ADAPT_Clean_Data` data frame has `r nrow(ADAPT_Clean_Data)` rows 
and `r ncol(ADAPT_Clean_Data)` variables. @tbl-ADAPT-Clean-variables shows a 
list of the variable positions, names, and classes.

``` {r}
#| label: tbl-ADAPT-Clean-variables
#| tbl-cap: "ADAPT Outcomes Clean Data: Variable Names and Classes."

ADAPT_CleanVars <- list(ADAPT_Clean_Data) %>% 
  map_dfr(~ tibble(Name = names(.x), Class = map_chr(.x, all_classes), 
                   Label = var_label(.x))) %>% 
  rowid_to_column(., "Position")

kable(ADAPT_CleanVars, format = "html", booktabs = TRUE, longtable = TRUE) %>%
  kable_styling(bootstrap_options = "striped", 
                latex_options = c("repeat_header")) 
```

# Save Imported, Cleaned Data

``` {r}
#| label: save-ADAPT-CLean_Data

# Save the current working version of the clean data. 
save(ADAPT_Clean_Data, file=here("data/ADAPT_Clean.RData"))
```

The data file can be loaded into R by copying the following code chunk into a
script, then changing the chunk option from  `eval: false` to `eval: true`, 
and running the chunk. That will overwrite any objects already in memory that 
have the same names as the objects being loaded.

``` {r}
#| label: load-ADAPT-Clean-Data
#| eval: false

load(file=here("data/ADAPT_Clean.RData"))
```

# References
::: {#refs}
:::

# Software Information
We used [R](https://www.r-project.org/) as our main computing environment and 
[Quarto](https://quarto.org/) scripts to enhance reproducibility. We used 
[RStudio](www.rstudio.org) as the editor to interface with R and Quarto. 

- Software chain:
  **qmd file > RStudio > Quarto > R > knitr > md file > Pandoc > html file**.
- Source file: **`r params$SourceFile`**
- Output file: **`r params$LogFile`**
- [Quarto `r quarto_version()`](https://quarto.org/) runs `*.qmd` files through 
  [R](https://www.r-project.org/) and [knitr](https://yihui.org/knitr/) to 
  produce `*.md` markdown files.
- [Pandoc `r rmarkdown::pandoc_version()`](https://pandoc.org) converts markdown 
  files (`*.md`) to other formats, including LaTeX (`*.tex`) and HTML (`*.html`) 
  among others.

This document was generated using the following computational environment and 
dependencies: 

``` {r}
#| label: show-version
#| echo: true

# Get R and R package version numbers in use.
devtools::session_info()
```

