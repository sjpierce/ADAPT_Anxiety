---
title: "Impute Missing ADAPT Data"
subtitle: "Client: Lucy Nguyen. CSTAT Case: C1593"
author: 
  - name: Steven J. Pierce
    orcid: 0000-0002-0679-3019
    email: pierces1@msu.edu
    affiliations: 
      - name: Michigan State University, Center for Statistical Training and Consulting
params:
  SourceDir: "scripts/"
  SourceFile: "Impute_Missing_Data.qmd"
  LogFile: "Impute_Missing_Data_Draft.html"
bibliography: references.bib
csl: apa.csl
date: now
date-modified: last-modified
date-format: YYYY-MM-DD HH:mm:ss z
format: 
  html:
    output-file: "Impute_Missing_Data_Draft.html"
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    number-depth: 3
    code-fold: true
    code-tools: true
    code-line-numbers: false
    embed-resources: true 
    anchor-sections: true
    theme: default
execute: 
  eval: true 
  echo: fenced 
  output: true 
  message: true 
  warning: true 
  error: true 
  include: true 
---

# Overview
This file contains results of statistical analyses performed by a 
[CSTAT](https://cstat.msu.edu) statistician for a project called 
*Effects of How Mental Health Diagnosis in Pediatric Patients with Functional Abdominal Pain Disorders Respond to Cognitive Behavioral Therapy Specifically for Anxiety Symptoms*, 
which was tracked by CSTAT as Case C1593. The original data come from one of 
Dr. Natoshia Cunningham's grants. Lucy is one of Dr. Cunningham's students. The
study was a randomized controlled trial of a tailored cognitive behavioral
therapy (CBT) treatment for functional abdominal pain in pediatric patients that
was called ADAPT [@Cunningham-RN8194]. The control group received treatment as 
usual (TAU).

This file assesses the degree and patterns of missing data in variables we may 
want for the intended analyses, then performs multiple imputation. 


# Setup
Most readers will want to just skip to @sec-Examine-Missing. This section is mostly
useful to the statistician who ran the analyses as methods and reproducibility 
documentation.

## Declare Path
This next chunk declares the path to this script relative to the project-level 
root directory. If the file is not in the right location under the project root
you'll get a warning message. This helps ensure relative paths are all working 
as expected. 

``` {r}
#| label: declare-path

# Declare path to this script relative to the project root directory.
here::i_am(path = paste0(params$SourceDir, params$SourceFile))
```

Note that `here()` creates a path relative to the location of the 
`ADAPT_Anxiety.Rproj` file that will be portable across different computers.
That's why we use that function when specifying file paths throughout the
script.

## Load Packages

```{r}
#| label: load-packages
#| include: true

library(devtools)     # for session_info()
library(here)         # for here() and i_am(), handling relative file paths. 
library(rmarkdown)    # for pandoc_version()
library(knitr)        # for kable()
options(kableExtra.latex.load_packages = FALSE)
library(kableExtra)   # for kable_styling() and formatting tables. 
library(tidyverse)    # Loads the dplyr, forcats, ggplot2, lubridate, purrr, 
                      # readr, stringr, tibble, and tidyr packages, for access 
                      # to %>%, select(), mutate(), etc. 
library(labelled)     # for set_variable_labels(), var_label()
library(piercer)      # for all_classes()
library(janitor)      # for adorn_totals()
library(mice)         # for mice(), flux(), etc. 
library(ggmice)       # for plot_pattern(), plot_corr()
library(patchwork)    # for wrap_plots()
library(VIM)          # for aggr()
library(quarto)       # for quarto_version()
```

## Read in Data
Here we just read in the data we need for the analyses. 

:::{.callout-important}
This script assumes you have already used `scripts/Import_SPSS_data.qmd` to 
create the data file `data/ADAPT_Clean.RData`.
:::

``` {r}
#| label: load-ADAPT-Clean-Data

load(file=here("data/ADAPT_Clean.RData"))
```

The imported `ADAPT_Clean_Data` data frame has `r nrow(ADAPT_Clean_Data)` rows 
and `r ncol(ADAPT_Clean_Data)` variables. @tbl-ADAPT-Clean-variables shows a 
list of the variable positions, names, and classes.

``` {r}
#| label: tbl-ADAPT-Clean-variables
#| tbl-cap: "ADAPT Outcomes Clean Data: Variable Names and Classes."

ADAPT_CleanVars <- list(ADAPT_Clean_Data) %>% 
  map_dfr(~ tibble(Name = names(.x), Class = map_chr(.x, all_classes), 
                   Label = var_label(.x))) %>% 
  rowid_to_column(., "Position")

kable(ADAPT_CleanVars, format = "html", booktabs = TRUE, longtable = TRUE) %>%
  kable_styling(bootstrap_options = "striped", 
                latex_options = c("repeat_header")) 
```

## Manage Data
Below we create the `ADAPT_PreImpute` dataset we will use for imputation. We are 
omitting many variables to focus on some key demographics, instrument scores, 
and the binary outcome variables. 

``` {r}
#| label: create-ADAPT-PreImpute

outcome_pre <- c("GAD_Pre", "Social_Pre", "SAD_Pre", "Panic_Pre", "OCD_Pre", 
                 "MDD_Pre", "Dysthymia_Pre")
outcome_post <- c("GAD_Post", "Social_Post", "SAD_Post", "Panic_Post", 
                  "OCD_Post", "MDD_Post", "Dysthymia_Post")
scores_pre  <- c("DASS_Tot_Pre", "SCARED_Tot_Pre", "CDI_Tot_Pre", "PCS_Tot_Pre", 
                 "FDI_Tot_Pre")
scores_post  <- c("DASS_Tot_Post", "SCARED_Tot_Post", "CDI_Tot_Post", 
                  "PCS_Tot_Post", "FDI_Tot_Post")

ADAPT_PreImpute <- ADAPT_Clean_Data %>% 
  select(ID, Arm, Dropout, Age, Gender, race_cat, 
         all_of(c(scores_pre, outcome_pre, scores_post, outcome_post)))
```

The imported `ADAPT_PreImpute` data frame has `r nrow(ADAPT_PreImpute)` rows 
and `r ncol(ADAPT_PreImpute)` variables. @tbl-ADAPT-PreImpute-variables shows a 
list of the variable positions, names, classes, number of valid and missing 
values, and percent of missing values.

``` {r}
#| label: tbl-ADAPT-PreImpute-variables
#| tbl-cap: "ADAPT Pre-Imputation Data: Variable Names and Classes."

list(ADAPT_PreImpute) %>% 
  map_dfr(~ tibble(Name = names(.x), 
                   Class = map_chr(.x, all_classes),
                   Label = get_variable_labels(.x), 
                   N_Valid = colSums(!is.na(.x)),
                   N_Missing = colSums(is.na(.x)),
                   Pct_Missing = 100*N_Missing/nrow(.x))) %>% 
  rowid_to_column(., "Position") %>% 
  kable(., format = "html", booktabs = TRUE, longtable = TRUE, digits = 1) %>%
  kable_styling(bootstrap_options = "striped", 
                latex_options = c("repeat_header")) 
```

# Examine Missingness {#sec-Examine-Missing}

```{r}
#| label: tbl-N
#| tbl-cap: Sample Size by Completeness of Data for Cases

mpat <- ADAPT_PreImpute %>% 
  select(-ID) %>% 
  md.pattern(x = ., plot = FALSE)

N_Total <- nrow(ADAPT_PreImpute)

# Number of complete cases
NCC <- ADAPT_PreImpute %>% 
  select(-ID) %>%
  ncc()

# Percent of complete cases
PCC <- round(100*NCC/N_Total, digits = 0)

# Number of incomplete cases
NIC <- ADAPT_PreImpute %>% 
  select(-ID) %>%
  nic()

# Percent of incomplete cases
PIC <- round(100*NIC/N_Total, digits = 0)

data.frame(N_Total, NCC, PCC, NIC, PIC) %>% 
  kable(., format = "html", booktabs = TRUE, 
        col.names = c("N", "N", "%", "N", "%")) %>% 
  kable_styling() %>% 
  add_header_above(., header = c(" ", "Complete Cases" = 2, "Incomplete Cases" = 2))
```

If we do imputation, the number of imputations should be about equal to the 
percent of cases that are incomplete (i.e., have any missing data). @tbl-N shows 
we have $N = `r N_Total`$ cases, of which $N_c = `r NCC`$ (`r PCC`%) are complete 
and $N_i = `r NIC`$ (`r PIC`%) are incomplete. 

@fig-patterns shows that patterns of missing data. Each row represents a unique 
pattern of observed versus missing data across `r ncol(ADAPT_PreImpute) - 1` 
variables. Each column shows a particular variable. The color of the cell 
indicates whether the data are observed or missing for a given variable in a 
specific pattern (i.e., row). The margins are annotated with additional 
information. @fig-patterns shows that the vast majority of the patients have
complete data on all the variables. The most common pattern of missingness is
tied to patients who dropped out before the posttest and thus have missing data
on all posttest measures. The `Dropout` variable marks those who dropped out and
must be used in imputations because it helps explain why some data are missing. 
We have at least $29 - 12 = 17$  observed variables for every patient in the 
sample. We can also see that for *every* patient, we have observed values for 
the seven key outcome variables (`GAD_*`, `Social_*`, `SAD_*`, `Panic_*`, 
`OCD_*`, `MDD_*`, & `Dysthymia_*`) at at least one time point (`*_Pre` or 
`*_Post`). 

```{r}
#| label: fig-patterns
#| fig-cap: Patterns of Missingness in ADAPT Pre-Imputation Data

ADAPT_PreImpute %>% 
  select(-ID) %>% 
  plot_pattern(data = ., rotate = TRUE)
```

Most of the missingness in the outcomes is attributable to dropout from the 
study. 

@tbl-flux shows the influx and outflux coefficients for each variable. These are
measures of connectedness in the data. Influx and outflux summarize the missing
data pattern and inform creating imputation models. High influx makes it easier
to impute that variable, while high outflux indicates that variable may help
impute other variables. Both measures range from 0 to 1. Influx will be $I = 0$
for a completely observed variable and $I = 1$ for completely missing variable. 
Given two variables with the same amount of missing data, the one with larger 
influx should be easier to impute. Outflux is $O = 1$ for a completely observed 
variable and is $O = 0$ for a completely missing variable. 

```{r}
#| label: tbl-flux
#| tbl-cap: Influx and Outflux Coefficients in ADAPT Pre-Imputation Data

ADAPT_PreImpute %>% 
  select(-ID) %>% 
  flux() %>% 
  select(pobs, influx, outflux) %>% 
  rownames_to_column(., var = "Variable") %>% 
  kable(., format = "html", booktabs = TRUE, digits = 3, 
        col.names = c("Variable", "Proportion Observed", "Influx", "Outflux")) %>% 
  kable_styling()
```

@fig-corrs shows that there are a variety of small to moderate correlations 
between variables that may facilitation imputation. 

```{r}
#| label: fig-corrs
#| fig-cap: Correlations in ADAPT Pre-Imputation Data
#| fig-height: 8
#| fig-wdith: 10

ADAPT_PreImpute %>% 
  select(-ID) %>% 
  plot_corr(data = ., rotate = TRUE)
```

## Drouput Relationship to Other Variables
Now we examine whether dropout is related to arm or pretest outcomes. The tests 
in this section basically show that whether or not a patient dropped out was 
unrelated to study arm and also unrelated to all 7 of the binary diagnosis 
outcomes measured at pretest. That suggests there is no evidence of selective 
dropout. 

### Arm

```{r}
#| label: Dropout-Arm

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + Arm, data = .) 
addmargins(x)

fisher.test(x = x)
```

### GAD_Pre

```{r}
#| label: Dropout-GAD-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + GAD_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

### Social_Pre

```{r}
#| label: Dropout-Social-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + Social_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

### SAD_Pre

```{r}
#| label: Dropout-SAD-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + SAD_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

### Panic_Pre

```{r}
#| label: Dropout-Panic-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + Panic_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

### OCD_Pre

```{r}
#| label: Dropout-OCD-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + OCD_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

### MDD_Pre

```{r}
#| label: Dropout-MDD-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + MDD_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

### Dysthymia_Pre

```{r}
#| label: Dropout-Dysthymia-Pre

x <- ADAPT_PreImpute %>% 
  xtabs(~Dropout + Dysthymia_Pre, data = .) 
addmargins(x)

fisher.test(x = x)
```

# Impute Missing Data
We are using the `mice` package to impute the missing data via predictive mean 
matching (PMM) [@van_Buuren-RN3962]. Note that some variables already have 
complete data, so they don't need any imputation predictors at all. Because the 
sample size is not large, we want to be judicious about which effects we include 
in the imputation model. The model here is aiming to preserve:

* Correlations between arm, dropout, age, gender and race with each outcome
* Longitudinal auto-correlations for each outcome from pretest to posttest
* Cross-sectional correlations between outcomes measured at the same time.

This strategy follows the logic in Section 11.2 in @van_Buuren-RN3962 that 
described imputation on longitudinal data stored in wide, multivariate format.  
The example study was a clinical trial aiming for an intent-to-treat analysis. 

## Setup Imputation Predictors
The chunk below sets up the matrix of imputation predictors. 

```{r}
#| label: imputation-predictors

# Capture initial default settings for mice to get predictor matrix.
ini <- mice(data = ADAPT_PreImpute, maxit=0) 

# Extract and update the predictor matrix. ID can't be used because it doesn't
# make sense to do so, Dropout seems to be an issue if used to predict the 
# posttest variables. 
Predictors <- ini$predictorMatrix 
Predictors[,"ID"] <- 0 
Predictors[c(scores_post, outcome_post), 'Dropout'] <- 0 

# Don't use other scores/outcomes from posttest, but allow longitudinal 
# effect of same variable over time.
Predictors["SCARED_Tot_Pre", 
           setdiff(c(scores_post, outcome_post), "SCARED_Tot_Post")] = 0
Predictors["DASS_Tot_Pre", 
           setdiff(c(scores_post, outcome_post), "DASS_Tot_Post")] = 0
Predictors["GAD_Pre", 
           setdiff(c(scores_post, outcome_post), "GAD_Post")] = 0
Predictors["Social_Pre", 
           setdiff(c(scores_post, outcome_post), "Social_Post")] = 0
Predictors["SAD_Pre", 
           setdiff(c(scores_post, outcome_post), "SAD_Post")] = 0
Predictors["Panic_Pre", 
           setdiff(c(scores_post, outcome_post), "Panic_Post")] = 0
Predictors["OCD_Pre", 
           setdiff(c(scores_post, outcome_post), "OCD_Post")] = 0
Predictors["MDD_Pre", 
           setdiff(c(scores_post, outcome_post), "MDD_Post")] = 0
Predictors["Dysthymia_Pre", 
           setdiff(c(scores_post, outcome_post), "Dysthymia_Post")] = 0

# Don't use other scores/outcomes from pretest, but allow longitudinal 
# effect of same variable over time.
Predictors["SCARED_Tot_Post", 
           setdiff(c(scores_pre, outcome_pre), "SCARED_Tot_Pre")] = 0
Predictors["DASS_Tot_Post", 
           setdiff(c(scores_pre, outcome_pre), "DASS_Tot_Pre")] = 0
Predictors["CDI_Tot_Post", 
           setdiff(c(scores_pre, outcome_pre), "CDI_Tot_Pre")] = 0
Predictors["FDI_Tot_Post", 
           setdiff(c(scores_pre, outcome_pre), "FDI_Tot_Pre")] = 0
Predictors["PCS_Tot_Post", 
           setdiff(c(scores_pre, outcome_pre), "PCS_Tot_Pre")] = 0
Predictors["GAD_Post", 
           setdiff(c(scores_pre, outcome_pre), "GAD_Pre")] = 0
Predictors["Social_Post", 
           setdiff(c(scores_pre, outcome_pre), "Social_Pre")] = 0
Predictors["SAD_Post", 
           setdiff(c(scores_pre, outcome_pre), "SAD_Pre")] = 0
Predictors["Panic_Post", 
           setdiff(c(scores_pre, outcome_pre), "Panic_Pre")] = 0
Predictors["OCD_Post", 
           setdiff(c(scores_pre, outcome_pre), "OCD_Pre")] = 0
Predictors["MDD_Post", 
           setdiff(c(scores_pre, outcome_pre), "MDD_Pre")] = 0
Predictors["Dysthymia_Post", 
           setdiff(c(scores_pre, outcome_pre), "Dysthymia_Pre")] = 0

# Don't allow any predictors of variables that are already complete.
Predictors[c("ID", "Arm", "Dropout", "Age", "Gender", "race_cat", "CDI_Tot_Pre",
             "PCS_Tot_Pre", "FDI_Tot_Pre"),] <- 0 

# Avoid using any variable to predict itself. This overwrites any diagonal cells 
# previously set to 1 by code above.
diag(Predictors) <- 0
```

@fig-predictors shows which variables are used as imputation predictors for each 
variable that has missing data to be imputed. 

```{r}
#| label: fig-predictors
#| fig-cap: Imputation Model Predictor Matrix
#| fig-height: 10
#| fig-wdith: 10

plot_pred(Predictors, rotate = TRUE)
```

## Perform The Actual Imputation
The chunk below does the actual imputation. 

```{r}
#| label: impute-data
#| eval: true

# This does the actual imputation. 
ADAPT_Imputed_Data <- mice(data = ADAPT_PreImpute, m = 18, pred = Predictors, 
                           method = "pmm", maxit = 20, seed = 31766, 
                           printFlag = FALSE)
```

## Diagnostics: Traceplots
@fig-traceplots-scores-pre, @fig-traceplots-outcome-pre, 
@fig-traceplots-scores-post, and @fig-traceplots-outcome-post show trace plots 
for batches of variables that let us assess whether the imputation model has 
converged. We need to reach convergence before we can rely on the results. 

```{r}
#| label: fig-traceplots-scores-pre
#| fig-cap: Imputation Trace Plot
#| fig-height: 7
#| fig-wdith: 7

plot_trace(ADAPT_Imputed_Data, 
           vrb = c("DASS_Tot_Pre", "SCARED_Tot_Pre"))
```

```{r}
#| label: fig-traceplots-outcome-pre
#| fig-cap: Imputation Trace Plot
#| fig-height: 7
#| fig-wdith: 7

plot_trace(ADAPT_Imputed_Data, 
           vrb = c("GAD_Pre", "Social_Pre", "SAD_Pre", "Panic_Pre", "OCD_Pre", 
                   "MDD_Pre", "Dysthymia_Pre"))
```

```{r}
#| label: fig-traceplots-scores-post
#| fig-cap: Imputation Trace Plot
#| fig-height: 7
#| fig-wdith: 7

plot_trace(ADAPT_Imputed_Data, 
           vrb = c("DASS_Tot_Post", "SCARED_Tot_Post", "CDI_Tot_Post", 
                   "PCS_Tot_Post", "FDI_Tot_Post"))
```

```{r}
#| label: fig-traceplots-outcome-post
#| fig-cap: Imputation Trace Plot
#| fig-height: 7
#| fig-wdith: 7

plot_trace(ADAPT_Imputed_Data, 
           vrb = c("GAD_Post", "Social_Post", "SAD_Post", "Panic_Post",
                   "OCD_Post", "MDD_Post", "Dysthymia_Post"))
```

## Diagnostics: Logged Events

```{r}
#| label: tbl-logged-events
#| tbl-cap: Logged Events from Imputation

# Show a table only if there are logged events (which indicate problems)
if(!is.null(ADAPT_Imputed_Data$loggedEvents)){
  ADAPT_Imputed_Data$loggedEvents %>% 
  kable() %>% 
  kable_styling() 
} 
```

## Diagnostics: Continuous Variable Distributions

```{r}
#| label: fig-stripplots-DASS
#| fig-cap: Distributions of Observed and Imputed DASS Scores at Prestest and 
#|          Posttest by Imputation Number
#| fig-height: 6

map(c("DASS_Tot_Pre", "DASS_Tot_Post"), ~ {
    ggmice(ADAPT_Imputed_Data, mapping = aes(x = .imp, y = .data[[.x]])) +
    geom_jitter(height = 0, width = .25) + 
    scale_y_continuous(limits = c(0, 60), 
                       breaks = seq(from = 0, to = 60, by = 10)) + 
    labs(x = "Imputation Number")}) %>%
  wrap_plots(nrow = 2)
```


```{r}
#| label: fig-stripplots-SCARED
#| fig-cap: Distributions of Observed and Imputed SCARED Scores at Prestest and 
#|          Posttest by Imputation Number
#| fig-height: 6

map(c("SCARED_Tot_Pre", "SCARED_Tot_Post"), ~ {
    ggmice(ADAPT_Imputed_Data, mapping = aes(x = .imp, y = .data[[.x]])) +
    geom_jitter(height = 0, width = .25) + 
    scale_y_continuous(limits = c(0, 80), 
                       breaks = seq(from = 0, to = 80, by = 10)) + 
    labs(x = "Imputation Number")}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-stripplots-CDI
#| fig-cap: Distributions of Observed and Imputed CDI Scores at Prestest and 
#|          Posttest by Imputation Number
#| fig-height: 6

map(c( "CDI_Tot_Pre", "CDI_Tot_Post"), ~ {
    ggmice(ADAPT_Imputed_Data, mapping = aes(x = .imp, y = .data[[.x]])) +
    geom_jitter(height = 0, width = .25) + 
    scale_y_continuous(limits = c(0, 40), 
                       breaks = seq(from = 0, to = 40, by = 10)) + 
    labs(x = "Imputation Number")}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-stripplots-PCS
#| fig-cap: Distributions of Observed and Imputed PCS Scores at Prestest and 
#|          Posttest by Imputation Number
#| fig-height: 6

map(c("PCS_Tot_Pre", "PCS_Tot_Post"), ~ {
    ggmice(ADAPT_Imputed_Data, mapping = aes(x = .imp, y = .data[[.x]])) +
    geom_jitter(height = 0, width = .25) + 
    scale_y_continuous(limits = c(0, 60), 
                       breaks = seq(from = 0, to = 60, by = 10)) + 
    labs(x = "Imputation Number")}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-stripplots-FDI
#| fig-cap: Distributions of Observed and Imputed FDI Scores at Prestest and 
#|          Posttest by Imputation Number
#| fig-height: 6

map(c("FDI_Tot_Pre", "FDI_Tot_Post"), ~ {
    ggmice(ADAPT_Imputed_Data, mapping = aes(x = .imp, y = .data[[.x]])) +
    geom_jitter(height = 0, width = .25) + 
    scale_y_continuous(limits = c(0, 50), 
                       breaks = seq(from = 0, to = 50, by = 10)) + 
    labs(x = "Imputation Number")}) %>%
  wrap_plots(nrow = 2)
```

## Diagnostics: Binary Variable Distributions

```{r}
#| label: fig-barplots-Social
#| fig-cap: Distributions of Observed and Imputed Social Diagnoses at Pretest 
#|          and Posttest by Imputation Number

map(c("Social_Pre", "Social_Post"), ~ {
  ggmice(ADAPT_Imputed_Data, mapping = aes(x = .data[[.x]])) + 
  geom_bar(fill = "white", stat = "count") + 
  scale_y_continuous(limits = c(0, 65), breaks = seq(from = 0, to = 60, by = 20)) +
  facet_wrap(~ .imp, nrow = 1) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-barplots-SAD
#| fig-cap: Distributions of Observed and Imputed SAD Diagnoses at Pretest and 
#|          Posttest by Imputation Number

map(c("SAD_Pre", "SAD_Post"), ~ {
  ggmice(ADAPT_Imputed_Data, mapping = aes(x = .data[[.x]])) + 
  geom_bar(fill = "white", stat = "count") + 
  scale_y_continuous(limits = c(0, 70), breaks = seq(from = 0, to = 70, by = 20)) +
  facet_wrap(~ .imp, nrow = 1) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-barplots-Panic
#| fig-cap: Distributions of Observed and Imputed Panic Diagnoses at Pretest and 
#|          Posttest by Imputation Number

map(c("Panic_Pre", "Panic_Post"), ~ {
  ggmice(ADAPT_Imputed_Data, mapping = aes(x = .data[[.x]])) + 
  geom_bar(fill = "white", stat = "count") + 
  scale_y_continuous(limits = c(0, 80), breaks = seq(from = 0, to = 80, by = 20)) +
  facet_wrap(~ .imp, nrow = 1) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-barplots-OCD
#| fig-cap: Distributions of Observed and Imputed OCD Diagnoses at Pretest and 
#|          Posttest by Imputation Number

map(c("OCD_Pre", "OCD_Post"), ~ {
  ggmice(ADAPT_Imputed_Data, mapping = aes(x = .data[[.x]])) + 
  geom_bar(fill = "white", stat = "count") + 
  scale_y_continuous(limits = c(0, 80), breaks = seq(from = 0, to = 80, by = 20)) +
  facet_wrap(~ .imp, nrow = 1) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-barplots-MDD
#| fig-cap: Distributions of Observed and Imputed MDD Diagnoses at Pretest and
#|          Posttest by Imputation Number

map(c("MDD_Pre", "MDD_Post"), ~ {
  ggmice(ADAPT_Imputed_Data, mapping = aes(x = .data[[.x]])) + 
  geom_bar(fill = "white", stat = "count") + 
  scale_y_continuous(limits = c(0, 80), breaks = seq(from = 0, to = 80, by = 20)) +
  facet_wrap(~ .imp, nrow = 1) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))}) %>%
  wrap_plots(nrow = 2)
```

```{r}
#| label: fig-barplots-Dysthymia
#| fig-cap: Distributions of Observed and Imputed Dysthymia Diagnoses at Pretest 
#|          and Posttest by Imputation Number

map(c("Dysthymia_Pre", "Dysthymia_Post"), ~ {
  ggmice(ADAPT_Imputed_Data, mapping = aes(x = .data[[.x]])) + 
  geom_bar(fill = "white", stat = "count") + 
  scale_y_continuous(limits = c(0, 85), breaks = seq(from = 0, to = 80, by = 20)) +
  facet_wrap(~ .imp, nrow = 1) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))}) %>%
  wrap_plots(nrow = 2)
```

# Save Imputed Data

``` {r}
#| label: save-ADAPT-Imputed-Data

# Copy imputed data to a new object name.

# Save the current working version of the clean data. 
save(ADAPT_PreImpute, ADAPT_Imputed_Data, 
     file=here("data/ADAPT_Imputed.RData"))
```

The data file can be loaded into R by copying the following code chunk into a
script, then changing the chunk option from  `eval: false` to `eval: true`, 
and running the chunk. That will overwrite any objects already in memory that 
have the same names as the objects being loaded.

``` {r}
#| label: load-ADAPT-Imputed-Data
#| eval: false

load(file=here("data/ADAPT_Imputed.RData"))
```

# References
::: {#refs}
:::

# Software Information
We used [R](https://www.r-project.org/) as our main computing environment and 
[Quarto](https://quarto.org/) scripts to enhance reproducibility. We used 
[RStudio](www.rstudio.org) as the editor to interface with R and Quarto. 

- Software chain:
  **qmd file > RStudio > Quarto > R > knitr > md file > Pandoc > html file**.
- Source file: **`r params$SourceFile`**
- Output file: **`r params$LogFile`**
- [Quarto `r quarto_version()`](https://quarto.org/) runs `*.qmd` files through 
  [R](https://www.r-project.org/) and [knitr](https://yihui.org/knitr/) to 
  produce `*.md` markdown files.
- [Pandoc `r rmarkdown::pandoc_version()`](https://pandoc.org) converts markdown 
  files (`*.md`) to other formats, including LaTeX (`*.tex`) and HTML (`*.html`) 
  among others.

This document was generated using the following computational environment and 
dependencies: 

``` {r}
#| label: show-version
#| echo: true

# Get R and R package version numbers in use.
devtools::session_info()
```

